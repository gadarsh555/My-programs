Subsequence Hate:https://codeforces.com/contest/1363/problem/B
-----------------------------------------------------


Shubham has a binary string 𝑠. A binary string is a string containing only characters "0" and "1".

He can perform the following operation on the string any amount of times:

Select an index of the string, and flip the character at that index. This means, if the character was "0", it becomes "1", and vice versa.
A string is called good if it does not contain "010" or "101" as a subsequence  — for instance, "1001" contains "101" as a subsequence, hence it is not a good string, while "1000" doesn't contain neither "010" nor "101" as subsequences, so it is a good string.

What is the minimum number of operations he will have to perform, so that the string becomes good? It can be shown that with these operations we can make any string good.

A string 𝑎 is a subsequence of a string 𝑏 if 𝑎 can be obtained from 𝑏 by deletion of several (possibly, zero or all) characters.


Solution:
---------------------------------------------------------------------------------
Key Idea: There are two types of good strings: Those which start with a series of 1's followed by 0's (such as 1111100) and those which start with a series of 0's followed by 1's (such as 00111). Note that there are strings which do belong to both categories (such as 000).

Detailed Explanation: We will use the key idea to compute the minimum change required to achieve every possible string of each of the two types, and then take the minimum across them.

First, let us compute the total number of 1's and 0's in the string, denoted by num_ones and num_zeros. Now, as we iterate through the string, let us also maintain done_ones and done_zeros, which denote the number of 1's and 0's encountered so far.

Let us iterate through the string. When we are at position 𝑖 (indexed from 1), we want to answer two questions: what is the cost for changing the string into 11..000 (where number of 1's = 𝑖) and what is the cost for changing the string into 00..111 (where number of 0's = 𝑖).

Assuming that done_zeros and done_ones also consider the current index, the answer to the first question is done_zeros + num_ones - done_ones. This is because done_zeros 0's must be converted to 1's, and num_ones - done_ones 1's must be converted to 0's. Similarly, the answer for the second question is done_ones + num_zeros - done_zeros.

The answer is the minimum over all such changes possible. Please do not forget to consider the all 1's and all 0's string in the above solution.

Time Complexity: 𝑂(𝑁)

Program:
--------------------------------------------------------------------------------------

#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define ld long double
#define m 1000000
#define mod         1000000007
int main()
{
    ll t;
    cin>>t;
    while(t--){
        ll cost =0,ans=mod;
        string s;
        cin>>s;
        ll n0=0,n1=0,d0=0,d1=0;
        for(ll i=0;i<s.size();i++){
            if(s[i] == '0')
            n0++;
            else
            n1++;
        }//for
        for(ll i=0;i<s.size();i++){
            if(s[i] == '0')
            d0++;
            else
            d1++;
            cost = min(d0 + (n1 - d1),d1 + (n0 - d0));
            ans = min(ans,cost);
        }//for
        cout<<ans<<endl;
    }//while
 
return 0;
}
