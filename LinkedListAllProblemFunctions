Linked Lists Problems :
----------------------------------------------------------------------------
1:Getting the middle element of a list when only head element is given.

 int getMiddle(Node *head)
{
   Node *slow = head;
   Node *fast = head;
   
   while(fast != NULL && fast->next != NULL){
       fast = fast->next->next;
       slow = slow->next;
   }//while
      return slow->data;  
}


2:Reversing a linked list when only head element is given

 Node* reverseList(Node *head)
{
  Node *first = head;
  Node *second = head;
  Node *third = head;
  if(second->next != NULL){
      second = second->next;
      third = third->next;
  }//if
  else
  return second;
  first->next = NULL;
  while(third != NULL){
      third = third->next;
      second->next = first;
      first = second;
      second = third;
  }//while
  return first;
}

3: Checking if a linked list has loop or not .

int detectloop(Node *head) {

    Node *first = head;
    Node *second = head;
    
    while(second->next != NULL && first->next != NULL && first->next->next != NULL){
        first = first->next->next;
        second = second->next;
        if(first != NULL && first == second)
        return 1;
    }//while
    return 0;
}


4:Rotating a linked list upto k elements:

Node* rotate(Node* head, int k) {
    Node *first = head;
    Node *second = head;
    int c = 0;
  
    while(k>1){
        first = first->next;
        k--;
    }//while
    if(first->next != NULL){
        second = first->next;
        first->next = NULL;
        first = second;
        while(second->next != NULL)
        second = second->next;
        second->next = head;
        return first;
    }//if
    else
    return head;
    
}
 
