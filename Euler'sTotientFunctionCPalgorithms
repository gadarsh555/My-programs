Euler's totient function
------------------------------------------------------------------------------------------------
Euler's totient function, also known as phi-function ϕ(n), counts the number of integers between 1 and n inclusive, which are coprime to n. Two numbers are coprime if their greatest common divisor equals 1 (1 is considered to be coprime to any number).

Here are values of ϕ(n) for the first few positive integers:
nϕ(n)11213242546276849610411101241312146158168171618619182082112
Properties
The following properties of Euler totient function are sufficient to calculate it for any number:

If p is a prime number, then gcd(p,q)=1 for all 1≤q<p. Therefore we have:
ϕ(p)=p−1.
If p is a prime number and k≥1, then there are exactly pk/p numbers between 1 and pk that are divisible by p. Which gives us:
ϕ(pk)=pk−pk−1.
If a and b are relatively prime, then:
ϕ(ab)=ϕ(a)⋅ϕ(b).
This relation is not trivial to see. It follows from the Chinese remainder theorem. The Chinese remainder theorem guarantees, that for each 0≤x<a and each 0≤y<b, there exists a unique 0≤z<ab with z≡x(moda) and z≡y(modb). It's not hard to show that z is coprime to ab if and only if x is coprime to a and y is coprime to b. Therefore the amount of integers coprime to ab is equal to product of the amounts of a and b.

In general, for not coprime a and b, the equation
ϕ(ab)=ϕ(a)⋅ϕ(b)⋅dϕ(d)
with d=gcd(a,b) holds.

Thus, using the first three properties, we can compute ϕ(n) through the factorization of n (decomposition of n into a product of its prime factors). If n=p1a1⋅p2a2⋯pkak, where pi are prime factors of n,

ϕ(n)=ϕ(p1a1)⋅ϕ(p2a2)⋯ϕ(pkak)=(p1a1−p1a1−1)⋅(p2a2−p2a2−1)⋯(pkak−pkak−1)=pa11⋅(1−1p1)⋅pa22⋅(1−1p2)⋯pakk⋅(1−1pk)=n⋅(1−1p1)⋅(1−1p2)⋯(1−1pk)
Implementation
Here is an implementation using factorization in O(n‾√):

int phi(int n) {
    int result = n;
    for (int i = 2; i * i <= n; i++) {
        if (n % i == 0) {
            while (n % i == 0)
                n /= i;
            result -= result / i;
        }
    }
    if (n > 1)
        result -= result / n;
    return result;
}
Euler totient function from 1 to n in O(nloglogn)
If we need all all the totient of all numbers between 1 and n, then factorizing all n numbers is not efficient. We can use the same idea as the Sieve of Eratosthenes. It is still based on the property shown above, but instead of updating the temporary result for each prime factor for each number, we find all prime numbers and for each one update the temporary results of all numbers that are divisible by that prime number.

Since this approach is basically identical to the Sieve of Eratosthenes, the complexity will also be the same: O(nloglogn)
void phi_1_to_n(int n) {
    vector<int> phi(n + 1);
    phi[0] = 0;
    phi[1] = 1;
    for (int i = 2; i <= n; i++)
        phi[i] = i;

    for (int i = 2; i <= n; i++) {
        if (phi[i] == i) {
            for (int j = i; j <= n; j += i)
                phi[j] -= phi[j] / i;
        }
    }
}
Divisor sum property
This interesting property was established by Gauss:

∑d|nϕ(d)=n
Here the sum is over all positive divisors d of n.

For instance the divisors of 10 are 1, 2, 5 and 10. Hence ϕ(1)+ϕ(2)+ϕ(5)+ϕ(10)=1+1+4+4=10.

Finding the totient from 1 to n using the divisor sum property
The divisor sum property also allows us to compute the totient of all numbers between 1 and n. This implementation is a little simpler than the previous implementation based on the Sieve of Eratosthenes, however also has a slightly worse complexity: O(nlogn)
void phi_1_to_n(int n) {
    vector<int> phi(n + 1);
    phi[0] = 0;
    phi[1] = 1;
    for (int i = 2; i <= n; i++)
        phi[i] = i - 1;

    for (int i = 2; i <= n; i++)
        for (int j = 2 * i; j <= n; j += i)
              phi[j] -= phi[i];
}
Application in Euler's theorem
The most famous and important property of Euler's totient function is expressed in Euler's theorem:
aϕ(m)≡1(modm)
if a and m are relatively prime.

In the particular case when m is prime, Euler's theorem turns into Fermat's little theorem:
am−1≡1(modm)
Euler's theorem and Euler's totient function occur quite often in practical applications, for example both are used to compute the modular multiplicative inverse.

As immediate consequence we also get the equivalence:
an≡anmodϕ(m)(modm)
This allows computing xnmodm for very big n, especially if n is the result of another computation, as it allows to compute n under a modulo.
