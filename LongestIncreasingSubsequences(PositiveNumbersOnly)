Longest Increasing Subsequence | DP-3:
----------------------------------------------------------------

Let us discuss Longest Increasing Subsequence (LIS) problem as an example problem that can be solved using Dynamic Programming.
The Longest Increasing Subsequence (LIS) problem is to find the length of the longest subsequence of a given sequence such that all elements of the subsequence are sorted in increasing order. For example, the length of LIS for {10, 22, 9, 33, 21, 50, 41, 60, 80} is 6 and LIS is {10, 22, 33, 50, 60, 80}.

Input  : arr[] = {3, 10, 2, 1, 20}
Output : Length of LIS = 3
The longest increasing subsequence is 3, 10, 20

Input  : arr[] = {3, 2}
Output : Length of LIS = 1
The longest increasing subsequences are {3} and {2}

Input : arr[] = {50, 3, 10, 7, 40, 80}
Output : Length of LIS = 4
The longest increasing subsequence is {3, 7, 40, 80}

Logic:
------------------------------------------------
we have to individually calculate ,the LIS ending at each element of the array,from the starting.
eg arr:3,10,2,1,20

length of LIS ending at element 3:1    (3),
length of LIS ending at element 10:2   (3,10),
length of LIS ending at element 2:1    (2),
length of LIS ending at element 1:1    (1),
length of LIS ending at element 20:3   (3,10,20)

i.e LIS = 3.

Now we can scan through the length of LIS for all elements and pick the largest one.


Program:
--------------------------------------------------------------

* Dynamic Programming C++ implementation of LIS problem */
#include<bits/stdc++.h>  
using namespace std; 
    
/* lis() returns the length of the longest increasing  
  subsequence in arr[] of size n */
int lis( int arr[], int n )  
{  
    int lis[n]; 
   
    lis[0] = 1;    
  
    /* Compute optimized LIS values in bottom up manner */
    for (int i = 1; i < n; i++ )  
    { 
        lis[i] = 1; 
        for (int j = 0; j < i; j++ )   
            if ( arr[i] > arr[j] && lis[i] < lis[j] + 1)  
                lis[i] = lis[j] + 1;  
    } 
  
    // Return maximum value in lis[] 
    return *max_element(lis, lis+n); 
}  
    
/* Driver program to test above function */
int main()  
{  
    int arr[] = { 10, 22, 9, 33, 21, 50, 41, 60 };  
    int n = sizeof(arr)/sizeof(arr[0]);  
    printf("Length of lis is %d\n", lis( arr, n ) );  
    return 0;  
}
